import cp,util.

sudoku(Board) =>
    Board :: 0..9,
    foreach(Row in Board)
        all_different(Row)
    end,
    foreach(Column in transpose(Board))
        all_different(Column)
    end,
    foreach(I in 1..3..9, J in 1..3..9)
        all_different([Board[I+K,J+L] : K in 0..2, L in 0..2])
    end,
    solve(Board),
    foreach (Row in Board)
        println(Row)
    end,
    nl.


board(X) =>
    X = {{_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_},
         {_,_,_,_,_,_,_,_,_}}.

main => board(Board), print(count_all(sudoku(Board))).
